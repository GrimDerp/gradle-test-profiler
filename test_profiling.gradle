import groovy.transform.Immutable

apply plugin: 'groovy'

/**
 * @author Adam Chudzik
 * @author Marcin Grzejszczak
 */
@Immutable
class TestExecutionResult {
    String testClassName
    String testName
    Double testExecutionTime
}

/**
 * @author Adam Chudzik
 * @author Marcin Grzejszczak
 */
@Immutable(knownImmutableClasses = [TestExecutionResult])
class ReportRow {
    String module
    TestExecutionResult testExecutionResult
    Double testClassExecutionTime
}

Set<TestExecutionResult> testExecutionResults = Collections.concurrentSet(new HashSet<TestExecutionResult>())

allprojects {

    project.ext {
        testprofiling_separator = '\t'
        testprofiling_headers = "module${testprofiling_separator}test class name${testprofiling_separator}test name${testprofiling_separator}test execution time in [s]${testprofiling_separator}test class execution time in [s]\n"
        testprofiling_comparator = { ReportRow o1, ReportRow o2 ->
            if (o1.testExecutionResult.testExecutionTime <=> o2.testExecutionResult.testExecutionTime != 0) {
                return o2.testExecutionResult.testExecutionTime <=> o1.testExecutionResult.testExecutionTime
            }
            if (o1.testExecutionResult.testClassName <=> o2.testExecutionResult.testClassName != 0) {
                return o2.testExecutionResult.testClassName <=> o1.testExecutionResult.testClassName
            }
            if (o1.testExecutionResult.testName <=> o2.testExecutionResult.testName != 0) {
                return o2.testExecutionResult.testName <=> o1.testExecutionResult.testName
            }
            if (o1.testClassExecutionTime <=> o2.testClassExecutionTime != 0) {
                return o2.testClassExecutionTime <=> o1.testClassExecutionTime
            }
            return o2.module <=> o1.module

        }
        testprofiling_dir = "${project.buildDir.absolutePath}/reports/test_profiling"
        testprofiling_filename = "testsProfile.csv"
        testprofiling_fullPath = "${testprofiling_dir}/${testprofiling_filename}"
        testprofiling_mergedTestProfilingSummaryDir = "${project.rootDir.absolutePath}/build/reports/test_profiling"
        testprofiling_mergedTestProfilingSummary = "${testprofiling_mergedTestProfilingSummaryDir}/summary.csv"
    }

    test {
        doFirst {
            testExecutionResults = [] as Set
        }

        addTestListener(new TestListener() {

            @Override
            void beforeSuite(TestDescriptor suite) { }

            @Override
            void afterSuite(TestDescriptor suite, TestResult result) { }

            @Override
            void beforeTest(TestDescriptor testDescriptor) { }

            @Override
            void afterTest(TestDescriptor testDescriptor, TestResult result) {
                testExecutionResults << new TestExecutionResult(testDescriptor.className, testDescriptor.name, ((result.endTime - result.startTime) / 1000) as Double)
            }

        })

        doLast {
            File reportDir = new File(testprofiling_dir)
            reportDir.mkdirs()
            File report = new File(testprofiling_fullPath)
            report.delete()
            report << testprofiling_headers 
            Map<String, Double> classExecutionTime = testExecutionResults.groupBy { it.testClassName }.collectEntries {
                [it.key, (it.value.sum { it.testExecutionTime } as Double).round(3)]
            } as Map<String, Double>

            String testExecutionResult = testExecutionResults.collect { new ReportRow(project.path, it, classExecutionTime[it.testClassName]) }
                    .sort(testprofiling_comparator)
                    .collect(rowFromReport()).join('\n')
            report << testExecutionResult 
            println "Your tests report is ready at [$report.absolutePath]"
            
            File mergedTestProfilingSummaryDir = new File(testprofiling_mergedTestProfilingSummaryDir)
            mergedTestProfilingSummaryDir.mkdirs()
            File mergedTestProfilingSummary = new File(testprofiling_mergedTestProfilingSummary)
            mergedTestProfilingSummary << testExecutionResult << '\n'
        }
           
    }
}

task testsProfileSummaryReport << {
    File mergedTestProfilingSummary = new File(project.ext.testprofiling_mergedTestProfilingSummary)
    String fileContent = mergedTestProfilingSummary.text
    mergedTestProfilingSummary.text = project.ext.testprofiling_headers
    Set<ReportRow> reportRows = new TreeSet<ReportRow>(project.ext.testprofiling_comparator) 
    fileContent.split('\n').each {
        String[] row = it.split(project.ext.testprofiling_separator)
        reportRows << new ReportRow(row[0], new TestExecutionResult(row[1], row[2], row[3] as Double), row[4] as Double)
    }
    mergedTestProfilingSummary << reportRows.collect(rowFromReport()).join('\n')
}

Closure<String> rowFromReport() {
    return { ReportRow reportRow ->
        "${reportRow.module}${testprofiling_separator}${reportRow.testExecutionResult.testClassName}${testprofiling_separator}${reportRow.testExecutionResult.testName}${testprofiling_separator}${reportRow.testExecutionResult.testExecutionTime}${testprofiling_separator}${reportRow.testClassExecutionTime}"
    }
}
